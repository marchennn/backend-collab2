# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# sensor types

class sensorOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the sensor create method"""
    id: _int
    timestamp: datetime.datetime
    update_at: datetime.datetime


class sensorCreateInput(sensorOptionalCreateInput):
    """Required arguments to the sensor create method"""
    temperature: _str
    humidity: _str
    distance1: _str
    distance2: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class sensorOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the sensor create method, without relations"""
    id: _int
    timestamp: datetime.datetime
    update_at: datetime.datetime


class sensorCreateWithoutRelationsInput(sensorOptionalCreateWithoutRelationsInput):
    """Required arguments to the sensor create method, without relations"""
    temperature: _str
    humidity: _str
    distance1: _str
    distance2: _str

class sensorConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'sensorCreateWithoutRelationsInput'
    where: 'sensorWhereUniqueInput'

class sensorCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'sensorCreateWithoutRelationsInput'
    connect: 'sensorWhereUniqueInput'
    connect_or_create: 'sensorConnectOrCreateWithoutRelationsInput'


class sensorCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['sensorCreateWithoutRelationsInput', List['sensorCreateWithoutRelationsInput']]
    connect: Union['sensorWhereUniqueInput', List['sensorWhereUniqueInput']]
    connect_or_create: Union['sensorConnectOrCreateWithoutRelationsInput', List['sensorConnectOrCreateWithoutRelationsInput']]

_sensorWhereUnique_id_Input = TypedDict(
    '_sensorWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

sensorWhereUniqueInput = _sensorWhereUnique_id_Input


class sensorUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    temperature: _str
    humidity: _str
    distance1: _str
    distance2: _str
    timestamp: datetime.datetime
    update_at: datetime.datetime


class sensorUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    temperature: _str
    humidity: _str
    distance1: _str
    distance2: _str
    timestamp: datetime.datetime
    update_at: datetime.datetime


class sensorUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['sensorCreateWithoutRelationsInput']
    connect: List['sensorWhereUniqueInput']
    connect_or_create: List['sensorConnectOrCreateWithoutRelationsInput']
    set: List['sensorWhereUniqueInput']
    disconnect: List['sensorWhereUniqueInput']
    delete: List['sensorWhereUniqueInput']

    # TODO
    # update: List['sensorUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['sensorUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['sensorScalarWhereInput']
    # upsert: List['sensorUpserteWithWhereUniqueWithoutRelationsInput']


class sensorUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'sensorCreateWithoutRelationsInput'
    connect: 'sensorWhereUniqueInput'
    connect_or_create: 'sensorConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'sensorUpdateInput'
    # upsert: 'sensorUpsertWithoutRelationsInput'


class sensorUpsertInput(TypedDict):
    create: 'sensorCreateInput'
    update: 'sensorUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_sensor_id_OrderByInput = TypedDict(
    '_sensor_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_sensor_temperature_OrderByInput = TypedDict(
    '_sensor_temperature_OrderByInput',
    {
        'temperature': 'SortOrder',
    },
    total=True
)

_sensor_humidity_OrderByInput = TypedDict(
    '_sensor_humidity_OrderByInput',
    {
        'humidity': 'SortOrder',
    },
    total=True
)

_sensor_distance1_OrderByInput = TypedDict(
    '_sensor_distance1_OrderByInput',
    {
        'distance1': 'SortOrder',
    },
    total=True
)

_sensor_distance2_OrderByInput = TypedDict(
    '_sensor_distance2_OrderByInput',
    {
        'distance2': 'SortOrder',
    },
    total=True
)

_sensor_timestamp_OrderByInput = TypedDict(
    '_sensor_timestamp_OrderByInput',
    {
        'timestamp': 'SortOrder',
    },
    total=True
)

_sensor_update_at_OrderByInput = TypedDict(
    '_sensor_update_at_OrderByInput',
    {
        'update_at': 'SortOrder',
    },
    total=True
)

_sensor_RelevanceInner = TypedDict(
    '_sensor_RelevanceInner',
    {
        'fields': 'List[sensorScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_sensor_RelevanceOrderByInput = TypedDict(
    '_sensor_RelevanceOrderByInput',
    {
        '_relevance': '_sensor_RelevanceInner',
    },
    total=True
)

sensorOrderByInput = Union[
    '_sensor_id_OrderByInput',
    '_sensor_temperature_OrderByInput',
    '_sensor_humidity_OrderByInput',
    '_sensor_distance1_OrderByInput',
    '_sensor_distance2_OrderByInput',
    '_sensor_timestamp_OrderByInput',
    '_sensor_update_at_OrderByInput',
    '_sensor_RelevanceOrderByInput',
]



# recursive sensor types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

sensorRelationFilter = TypedDict(
    'sensorRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class sensorListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class sensorInclude(TypedDict, total=False):
    """sensor relational arguments"""


    

class sensorIncludeFromsensor(TypedDict, total=False):
    """Relational arguments for sensor"""


class sensorIncludeFromsensorRecursive1(TypedDict, total=False):
    """Relational arguments for sensor"""


class sensorIncludeFromsensorRecursive2(TypedDict, total=False):
    """Relational arguments for sensor"""


class sensorIncludeFromsensorRecursive3(TypedDict, total=False):
    """Relational arguments for sensor"""


class sensorIncludeFromsensorRecursive4(TypedDict, total=False):
    """Relational arguments for sensor"""

    

class sensorArgsFromsensor(TypedDict, total=False):
    """Arguments for sensor"""
    include: 'sensorIncludeFromsensorRecursive1'


class sensorArgsFromsensorRecursive1(TypedDict, total=False):
    """Arguments for sensor"""
    include: 'sensorIncludeFromsensorRecursive2'


class sensorArgsFromsensorRecursive2(TypedDict, total=False):
    """Arguments for sensor"""
    include: 'sensorIncludeFromsensorRecursive3'


class sensorArgsFromsensorRecursive3(TypedDict, total=False):
    """Arguments for sensor"""
    include: 'sensorIncludeFromsensorRecursive4'


class sensorArgsFromsensorRecursive4(TypedDict, total=False):
    """Arguments for sensor"""
    
    

class FindManysensorArgsFromsensor(TypedDict, total=False):
    """Arguments for sensor"""
    take: int
    skip: int
    order_by: Union['sensorOrderByInput', List['sensorOrderByInput']]
    where: 'sensorWhereInput'
    cursor: 'sensorWhereUniqueInput'
    distinct: List['sensorScalarFieldKeys']
    include: 'sensorIncludeFromsensorRecursive1'


class FindManysensorArgsFromsensorRecursive1(TypedDict, total=False):
    """Arguments for sensor"""
    take: int
    skip: int
    order_by: Union['sensorOrderByInput', List['sensorOrderByInput']]
    where: 'sensorWhereInput'
    cursor: 'sensorWhereUniqueInput'
    distinct: List['sensorScalarFieldKeys']
    include: 'sensorIncludeFromsensorRecursive2'


class FindManysensorArgsFromsensorRecursive2(TypedDict, total=False):
    """Arguments for sensor"""
    take: int
    skip: int
    order_by: Union['sensorOrderByInput', List['sensorOrderByInput']]
    where: 'sensorWhereInput'
    cursor: 'sensorWhereUniqueInput'
    distinct: List['sensorScalarFieldKeys']
    include: 'sensorIncludeFromsensorRecursive3'


class FindManysensorArgsFromsensorRecursive3(TypedDict, total=False):
    """Arguments for sensor"""
    take: int
    skip: int
    order_by: Union['sensorOrderByInput', List['sensorOrderByInput']]
    where: 'sensorWhereInput'
    cursor: 'sensorWhereUniqueInput'
    distinct: List['sensorScalarFieldKeys']
    include: 'sensorIncludeFromsensorRecursive4'


class FindManysensorArgsFromsensorRecursive4(TypedDict, total=False):
    """Arguments for sensor"""
    take: int
    skip: int
    order_by: Union['sensorOrderByInput', List['sensorOrderByInput']]
    where: 'sensorWhereInput'
    cursor: 'sensorWhereUniqueInput'
    distinct: List['sensorScalarFieldKeys']
    
    

class ledIncludeFromsensor(TypedDict, total=False):
    """Relational arguments for sensor"""


class ledIncludeFromsensorRecursive1(TypedDict, total=False):
    """Relational arguments for sensor"""


class ledIncludeFromsensorRecursive2(TypedDict, total=False):
    """Relational arguments for sensor"""


class ledIncludeFromsensorRecursive3(TypedDict, total=False):
    """Relational arguments for sensor"""


class ledIncludeFromsensorRecursive4(TypedDict, total=False):
    """Relational arguments for sensor"""

    

class ledArgsFromsensor(TypedDict, total=False):
    """Arguments for sensor"""
    include: 'ledIncludeFromledRecursive1'


class ledArgsFromsensorRecursive1(TypedDict, total=False):
    """Arguments for sensor"""
    include: 'ledIncludeFromledRecursive2'


class ledArgsFromsensorRecursive2(TypedDict, total=False):
    """Arguments for sensor"""
    include: 'ledIncludeFromledRecursive3'


class ledArgsFromsensorRecursive3(TypedDict, total=False):
    """Arguments for sensor"""
    include: 'ledIncludeFromledRecursive4'


class ledArgsFromsensorRecursive4(TypedDict, total=False):
    """Arguments for sensor"""
    
    

class FindManyledArgsFromsensor(TypedDict, total=False):
    """Arguments for sensor"""
    take: int
    skip: int
    order_by: Union['ledOrderByInput', List['ledOrderByInput']]
    where: 'ledWhereInput'
    cursor: 'ledWhereUniqueInput'
    distinct: List['ledScalarFieldKeys']
    include: 'ledIncludeFromledRecursive1'


class FindManyledArgsFromsensorRecursive1(TypedDict, total=False):
    """Arguments for sensor"""
    take: int
    skip: int
    order_by: Union['ledOrderByInput', List['ledOrderByInput']]
    where: 'ledWhereInput'
    cursor: 'ledWhereUniqueInput'
    distinct: List['ledScalarFieldKeys']
    include: 'ledIncludeFromledRecursive2'


class FindManyledArgsFromsensorRecursive2(TypedDict, total=False):
    """Arguments for sensor"""
    take: int
    skip: int
    order_by: Union['ledOrderByInput', List['ledOrderByInput']]
    where: 'ledWhereInput'
    cursor: 'ledWhereUniqueInput'
    distinct: List['ledScalarFieldKeys']
    include: 'ledIncludeFromledRecursive3'


class FindManyledArgsFromsensorRecursive3(TypedDict, total=False):
    """Arguments for sensor"""
    take: int
    skip: int
    order_by: Union['ledOrderByInput', List['ledOrderByInput']]
    where: 'ledWhereInput'
    cursor: 'ledWhereUniqueInput'
    distinct: List['ledScalarFieldKeys']
    include: 'ledIncludeFromledRecursive4'


class FindManyledArgsFromsensorRecursive4(TypedDict, total=False):
    """Arguments for sensor"""
    take: int
    skip: int
    order_by: Union['ledOrderByInput', List['ledOrderByInput']]
    where: 'ledWhereInput'
    cursor: 'ledWhereUniqueInput'
    distinct: List['ledScalarFieldKeys']
    
    

class userIncludeFromsensor(TypedDict, total=False):
    """Relational arguments for sensor"""


class userIncludeFromsensorRecursive1(TypedDict, total=False):
    """Relational arguments for sensor"""


class userIncludeFromsensorRecursive2(TypedDict, total=False):
    """Relational arguments for sensor"""


class userIncludeFromsensorRecursive3(TypedDict, total=False):
    """Relational arguments for sensor"""


class userIncludeFromsensorRecursive4(TypedDict, total=False):
    """Relational arguments for sensor"""

    

class userArgsFromsensor(TypedDict, total=False):
    """Arguments for sensor"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFromsensorRecursive1(TypedDict, total=False):
    """Arguments for sensor"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFromsensorRecursive2(TypedDict, total=False):
    """Arguments for sensor"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFromsensorRecursive3(TypedDict, total=False):
    """Arguments for sensor"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFromsensorRecursive4(TypedDict, total=False):
    """Arguments for sensor"""
    
    

class FindManyuserArgsFromsensor(TypedDict, total=False):
    """Arguments for sensor"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFromsensorRecursive1(TypedDict, total=False):
    """Arguments for sensor"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFromsensorRecursive2(TypedDict, total=False):
    """Arguments for sensor"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFromsensorRecursive3(TypedDict, total=False):
    """Arguments for sensor"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFromsensorRecursive4(TypedDict, total=False):
    """Arguments for sensor"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    


FindManysensorArgs = FindManysensorArgsFromsensor
FindFirstsensorArgs = FindManysensorArgsFromsensor


    

class sensorWhereInput(TypedDict, total=False):
    """sensor arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    temperature: Union[_str, 'types.StringFilter']
    humidity: Union[_str, 'types.StringFilter']
    distance1: Union[_str, 'types.StringFilter']
    distance2: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['sensorWhereInputRecursive1', List['sensorWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['sensorWhereInputRecursive1']
    OR: List['sensorWhereInputRecursive1']
    NOT: List['sensorWhereInputRecursive1']


class sensorWhereInputRecursive1(TypedDict, total=False):
    """sensor arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    temperature: Union[_str, 'types.StringFilter']
    humidity: Union[_str, 'types.StringFilter']
    distance1: Union[_str, 'types.StringFilter']
    distance2: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['sensorWhereInputRecursive2', List['sensorWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['sensorWhereInputRecursive2']
    OR: List['sensorWhereInputRecursive2']
    NOT: List['sensorWhereInputRecursive2']


class sensorWhereInputRecursive2(TypedDict, total=False):
    """sensor arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    temperature: Union[_str, 'types.StringFilter']
    humidity: Union[_str, 'types.StringFilter']
    distance1: Union[_str, 'types.StringFilter']
    distance2: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['sensorWhereInputRecursive3', List['sensorWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['sensorWhereInputRecursive3']
    OR: List['sensorWhereInputRecursive3']
    NOT: List['sensorWhereInputRecursive3']


class sensorWhereInputRecursive3(TypedDict, total=False):
    """sensor arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    temperature: Union[_str, 'types.StringFilter']
    humidity: Union[_str, 'types.StringFilter']
    distance1: Union[_str, 'types.StringFilter']
    distance2: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['sensorWhereInputRecursive4', List['sensorWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['sensorWhereInputRecursive4']
    OR: List['sensorWhereInputRecursive4']
    NOT: List['sensorWhereInputRecursive4']


class sensorWhereInputRecursive4(TypedDict, total=False):
    """sensor arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    temperature: Union[_str, 'types.StringFilter']
    humidity: Union[_str, 'types.StringFilter']
    distance1: Union[_str, 'types.StringFilter']
    distance2: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate sensor types


    

class sensorScalarWhereWithAggregatesInput(TypedDict, total=False):
    """sensor arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    temperature: Union[_str, 'types.StringWithAggregatesFilter']
    humidity: Union[_str, 'types.StringWithAggregatesFilter']
    distance1: Union[_str, 'types.StringWithAggregatesFilter']
    distance2: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['sensorScalarWhereWithAggregatesInputRecursive1']
    OR: List['sensorScalarWhereWithAggregatesInputRecursive1']
    NOT: List['sensorScalarWhereWithAggregatesInputRecursive1']


class sensorScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """sensor arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    temperature: Union[_str, 'types.StringWithAggregatesFilter']
    humidity: Union[_str, 'types.StringWithAggregatesFilter']
    distance1: Union[_str, 'types.StringWithAggregatesFilter']
    distance2: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['sensorScalarWhereWithAggregatesInputRecursive2']
    OR: List['sensorScalarWhereWithAggregatesInputRecursive2']
    NOT: List['sensorScalarWhereWithAggregatesInputRecursive2']


class sensorScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """sensor arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    temperature: Union[_str, 'types.StringWithAggregatesFilter']
    humidity: Union[_str, 'types.StringWithAggregatesFilter']
    distance1: Union[_str, 'types.StringWithAggregatesFilter']
    distance2: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['sensorScalarWhereWithAggregatesInputRecursive3']
    OR: List['sensorScalarWhereWithAggregatesInputRecursive3']
    NOT: List['sensorScalarWhereWithAggregatesInputRecursive3']


class sensorScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """sensor arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    temperature: Union[_str, 'types.StringWithAggregatesFilter']
    humidity: Union[_str, 'types.StringWithAggregatesFilter']
    distance1: Union[_str, 'types.StringWithAggregatesFilter']
    distance2: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['sensorScalarWhereWithAggregatesInputRecursive4']
    OR: List['sensorScalarWhereWithAggregatesInputRecursive4']
    NOT: List['sensorScalarWhereWithAggregatesInputRecursive4']


class sensorScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """sensor arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    temperature: Union[_str, 'types.StringWithAggregatesFilter']
    humidity: Union[_str, 'types.StringWithAggregatesFilter']
    distance1: Union[_str, 'types.StringWithAggregatesFilter']
    distance2: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class sensorGroupByOutput(TypedDict, total=False):
    id: _int
    temperature: _str
    humidity: _str
    distance1: _str
    distance2: _str
    timestamp: datetime.datetime
    update_at: datetime.datetime
    _sum: 'sensorSumAggregateOutput'
    _avg: 'sensorAvgAggregateOutput'
    _min: 'sensorMinAggregateOutput'
    _max: 'sensorMaxAggregateOutput'
    _count: 'sensorCountAggregateOutput'


class sensorAvgAggregateOutput(TypedDict, total=False):
    """sensor output for aggregating averages"""
    id: float


class sensorSumAggregateOutput(TypedDict, total=False):
    """sensor output for aggregating sums"""
    id: _int


class sensorScalarAggregateOutput(TypedDict, total=False):
    """sensor output including scalar fields"""
    id: _int
    temperature: _str
    humidity: _str
    distance1: _str
    distance2: _str
    timestamp: datetime.datetime
    update_at: datetime.datetime


sensorMinAggregateOutput = sensorScalarAggregateOutput
sensorMaxAggregateOutput = sensorScalarAggregateOutput


class sensorMaxAggregateInput(TypedDict, total=False):
    """sensor input for aggregating by max"""
    id: bool
    temperature: bool
    humidity: bool
    distance1: bool
    distance2: bool
    timestamp: bool
    update_at: bool


class sensorMinAggregateInput(TypedDict, total=False):
    """sensor input for aggregating by min"""
    id: bool
    temperature: bool
    humidity: bool
    distance1: bool
    distance2: bool
    timestamp: bool
    update_at: bool


class sensorNumberAggregateInput(TypedDict, total=False):
    """sensor input for aggregating numbers"""
    id: bool


sensorAvgAggregateInput = sensorNumberAggregateInput
sensorSumAggregateInput = sensorNumberAggregateInput


sensorCountAggregateInput = TypedDict(
    'sensorCountAggregateInput',
    {
        'id': bool,
        'temperature': bool,
        'humidity': bool,
        'distance1': bool,
        'distance2': bool,
        'timestamp': bool,
        'update_at': bool,
        '_all': bool,
    },
    total=False,
)

sensorCountAggregateOutput = TypedDict(
    'sensorCountAggregateOutput',
    {
        'id': int,
        'temperature': int,
        'humidity': int,
        'distance1': int,
        'distance2': int,
        'timestamp': int,
        'update_at': int,
        '_all': int,
    },
    total=False,
)


sensorKeys = Literal[
    'id',
    'temperature',
    'humidity',
    'distance1',
    'distance2',
    'timestamp',
    'update_at',
]
sensorScalarFieldKeys = Literal[
    'id',
    'temperature',
    'humidity',
    'distance1',
    'distance2',
    'timestamp',
    'update_at',
]
sensorScalarFieldKeysT = TypeVar('sensorScalarFieldKeysT', bound=sensorScalarFieldKeys)

sensorRelationalFieldKeys = _NoneType

# led types

class ledOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the led create method"""
    id: _int
    timestamp: datetime.datetime
    update_at: datetime.datetime


class ledCreateInput(ledOptionalCreateInput):
    """Required arguments to the led create method"""
    led1: _str
    led2: _str
    led3: _str
    led4: _str
    led5: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ledOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the led create method, without relations"""
    id: _int
    timestamp: datetime.datetime
    update_at: datetime.datetime


class ledCreateWithoutRelationsInput(ledOptionalCreateWithoutRelationsInput):
    """Required arguments to the led create method, without relations"""
    led1: _str
    led2: _str
    led3: _str
    led4: _str
    led5: _str

class ledConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ledCreateWithoutRelationsInput'
    where: 'ledWhereUniqueInput'

class ledCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ledCreateWithoutRelationsInput'
    connect: 'ledWhereUniqueInput'
    connect_or_create: 'ledConnectOrCreateWithoutRelationsInput'


class ledCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ledCreateWithoutRelationsInput', List['ledCreateWithoutRelationsInput']]
    connect: Union['ledWhereUniqueInput', List['ledWhereUniqueInput']]
    connect_or_create: Union['ledConnectOrCreateWithoutRelationsInput', List['ledConnectOrCreateWithoutRelationsInput']]

_ledWhereUnique_id_Input = TypedDict(
    '_ledWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

ledWhereUniqueInput = _ledWhereUnique_id_Input


class ledUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    led1: _str
    led2: _str
    led3: _str
    led4: _str
    led5: _str
    timestamp: datetime.datetime
    update_at: datetime.datetime


class ledUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    led1: _str
    led2: _str
    led3: _str
    led4: _str
    led5: _str
    timestamp: datetime.datetime
    update_at: datetime.datetime


class ledUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ledCreateWithoutRelationsInput']
    connect: List['ledWhereUniqueInput']
    connect_or_create: List['ledConnectOrCreateWithoutRelationsInput']
    set: List['ledWhereUniqueInput']
    disconnect: List['ledWhereUniqueInput']
    delete: List['ledWhereUniqueInput']

    # TODO
    # update: List['ledUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ledUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ledScalarWhereInput']
    # upsert: List['ledUpserteWithWhereUniqueWithoutRelationsInput']


class ledUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ledCreateWithoutRelationsInput'
    connect: 'ledWhereUniqueInput'
    connect_or_create: 'ledConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ledUpdateInput'
    # upsert: 'ledUpsertWithoutRelationsInput'


class ledUpsertInput(TypedDict):
    create: 'ledCreateInput'
    update: 'ledUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_led_id_OrderByInput = TypedDict(
    '_led_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_led_led1_OrderByInput = TypedDict(
    '_led_led1_OrderByInput',
    {
        'led1': 'SortOrder',
    },
    total=True
)

_led_led2_OrderByInput = TypedDict(
    '_led_led2_OrderByInput',
    {
        'led2': 'SortOrder',
    },
    total=True
)

_led_led3_OrderByInput = TypedDict(
    '_led_led3_OrderByInput',
    {
        'led3': 'SortOrder',
    },
    total=True
)

_led_led4_OrderByInput = TypedDict(
    '_led_led4_OrderByInput',
    {
        'led4': 'SortOrder',
    },
    total=True
)

_led_led5_OrderByInput = TypedDict(
    '_led_led5_OrderByInput',
    {
        'led5': 'SortOrder',
    },
    total=True
)

_led_timestamp_OrderByInput = TypedDict(
    '_led_timestamp_OrderByInput',
    {
        'timestamp': 'SortOrder',
    },
    total=True
)

_led_update_at_OrderByInput = TypedDict(
    '_led_update_at_OrderByInput',
    {
        'update_at': 'SortOrder',
    },
    total=True
)

_led_RelevanceInner = TypedDict(
    '_led_RelevanceInner',
    {
        'fields': 'List[ledScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_led_RelevanceOrderByInput = TypedDict(
    '_led_RelevanceOrderByInput',
    {
        '_relevance': '_led_RelevanceInner',
    },
    total=True
)

ledOrderByInput = Union[
    '_led_id_OrderByInput',
    '_led_led1_OrderByInput',
    '_led_led2_OrderByInput',
    '_led_led3_OrderByInput',
    '_led_led4_OrderByInput',
    '_led_led5_OrderByInput',
    '_led_timestamp_OrderByInput',
    '_led_update_at_OrderByInput',
    '_led_RelevanceOrderByInput',
]



# recursive led types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ledRelationFilter = TypedDict(
    'ledRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ledListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ledInclude(TypedDict, total=False):
    """led relational arguments"""


    

class sensorIncludeFromled(TypedDict, total=False):
    """Relational arguments for led"""


class sensorIncludeFromledRecursive1(TypedDict, total=False):
    """Relational arguments for led"""


class sensorIncludeFromledRecursive2(TypedDict, total=False):
    """Relational arguments for led"""


class sensorIncludeFromledRecursive3(TypedDict, total=False):
    """Relational arguments for led"""


class sensorIncludeFromledRecursive4(TypedDict, total=False):
    """Relational arguments for led"""

    

class sensorArgsFromled(TypedDict, total=False):
    """Arguments for led"""
    include: 'sensorIncludeFromsensorRecursive1'


class sensorArgsFromledRecursive1(TypedDict, total=False):
    """Arguments for led"""
    include: 'sensorIncludeFromsensorRecursive2'


class sensorArgsFromledRecursive2(TypedDict, total=False):
    """Arguments for led"""
    include: 'sensorIncludeFromsensorRecursive3'


class sensorArgsFromledRecursive3(TypedDict, total=False):
    """Arguments for led"""
    include: 'sensorIncludeFromsensorRecursive4'


class sensorArgsFromledRecursive4(TypedDict, total=False):
    """Arguments for led"""
    
    

class FindManysensorArgsFromled(TypedDict, total=False):
    """Arguments for led"""
    take: int
    skip: int
    order_by: Union['sensorOrderByInput', List['sensorOrderByInput']]
    where: 'sensorWhereInput'
    cursor: 'sensorWhereUniqueInput'
    distinct: List['sensorScalarFieldKeys']
    include: 'sensorIncludeFromsensorRecursive1'


class FindManysensorArgsFromledRecursive1(TypedDict, total=False):
    """Arguments for led"""
    take: int
    skip: int
    order_by: Union['sensorOrderByInput', List['sensorOrderByInput']]
    where: 'sensorWhereInput'
    cursor: 'sensorWhereUniqueInput'
    distinct: List['sensorScalarFieldKeys']
    include: 'sensorIncludeFromsensorRecursive2'


class FindManysensorArgsFromledRecursive2(TypedDict, total=False):
    """Arguments for led"""
    take: int
    skip: int
    order_by: Union['sensorOrderByInput', List['sensorOrderByInput']]
    where: 'sensorWhereInput'
    cursor: 'sensorWhereUniqueInput'
    distinct: List['sensorScalarFieldKeys']
    include: 'sensorIncludeFromsensorRecursive3'


class FindManysensorArgsFromledRecursive3(TypedDict, total=False):
    """Arguments for led"""
    take: int
    skip: int
    order_by: Union['sensorOrderByInput', List['sensorOrderByInput']]
    where: 'sensorWhereInput'
    cursor: 'sensorWhereUniqueInput'
    distinct: List['sensorScalarFieldKeys']
    include: 'sensorIncludeFromsensorRecursive4'


class FindManysensorArgsFromledRecursive4(TypedDict, total=False):
    """Arguments for led"""
    take: int
    skip: int
    order_by: Union['sensorOrderByInput', List['sensorOrderByInput']]
    where: 'sensorWhereInput'
    cursor: 'sensorWhereUniqueInput'
    distinct: List['sensorScalarFieldKeys']
    
    

class ledIncludeFromled(TypedDict, total=False):
    """Relational arguments for led"""


class ledIncludeFromledRecursive1(TypedDict, total=False):
    """Relational arguments for led"""


class ledIncludeFromledRecursive2(TypedDict, total=False):
    """Relational arguments for led"""


class ledIncludeFromledRecursive3(TypedDict, total=False):
    """Relational arguments for led"""


class ledIncludeFromledRecursive4(TypedDict, total=False):
    """Relational arguments for led"""

    

class ledArgsFromled(TypedDict, total=False):
    """Arguments for led"""
    include: 'ledIncludeFromledRecursive1'


class ledArgsFromledRecursive1(TypedDict, total=False):
    """Arguments for led"""
    include: 'ledIncludeFromledRecursive2'


class ledArgsFromledRecursive2(TypedDict, total=False):
    """Arguments for led"""
    include: 'ledIncludeFromledRecursive3'


class ledArgsFromledRecursive3(TypedDict, total=False):
    """Arguments for led"""
    include: 'ledIncludeFromledRecursive4'


class ledArgsFromledRecursive4(TypedDict, total=False):
    """Arguments for led"""
    
    

class FindManyledArgsFromled(TypedDict, total=False):
    """Arguments for led"""
    take: int
    skip: int
    order_by: Union['ledOrderByInput', List['ledOrderByInput']]
    where: 'ledWhereInput'
    cursor: 'ledWhereUniqueInput'
    distinct: List['ledScalarFieldKeys']
    include: 'ledIncludeFromledRecursive1'


class FindManyledArgsFromledRecursive1(TypedDict, total=False):
    """Arguments for led"""
    take: int
    skip: int
    order_by: Union['ledOrderByInput', List['ledOrderByInput']]
    where: 'ledWhereInput'
    cursor: 'ledWhereUniqueInput'
    distinct: List['ledScalarFieldKeys']
    include: 'ledIncludeFromledRecursive2'


class FindManyledArgsFromledRecursive2(TypedDict, total=False):
    """Arguments for led"""
    take: int
    skip: int
    order_by: Union['ledOrderByInput', List['ledOrderByInput']]
    where: 'ledWhereInput'
    cursor: 'ledWhereUniqueInput'
    distinct: List['ledScalarFieldKeys']
    include: 'ledIncludeFromledRecursive3'


class FindManyledArgsFromledRecursive3(TypedDict, total=False):
    """Arguments for led"""
    take: int
    skip: int
    order_by: Union['ledOrderByInput', List['ledOrderByInput']]
    where: 'ledWhereInput'
    cursor: 'ledWhereUniqueInput'
    distinct: List['ledScalarFieldKeys']
    include: 'ledIncludeFromledRecursive4'


class FindManyledArgsFromledRecursive4(TypedDict, total=False):
    """Arguments for led"""
    take: int
    skip: int
    order_by: Union['ledOrderByInput', List['ledOrderByInput']]
    where: 'ledWhereInput'
    cursor: 'ledWhereUniqueInput'
    distinct: List['ledScalarFieldKeys']
    
    

class userIncludeFromled(TypedDict, total=False):
    """Relational arguments for led"""


class userIncludeFromledRecursive1(TypedDict, total=False):
    """Relational arguments for led"""


class userIncludeFromledRecursive2(TypedDict, total=False):
    """Relational arguments for led"""


class userIncludeFromledRecursive3(TypedDict, total=False):
    """Relational arguments for led"""


class userIncludeFromledRecursive4(TypedDict, total=False):
    """Relational arguments for led"""

    

class userArgsFromled(TypedDict, total=False):
    """Arguments for led"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFromledRecursive1(TypedDict, total=False):
    """Arguments for led"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFromledRecursive2(TypedDict, total=False):
    """Arguments for led"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFromledRecursive3(TypedDict, total=False):
    """Arguments for led"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFromledRecursive4(TypedDict, total=False):
    """Arguments for led"""
    
    

class FindManyuserArgsFromled(TypedDict, total=False):
    """Arguments for led"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFromledRecursive1(TypedDict, total=False):
    """Arguments for led"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFromledRecursive2(TypedDict, total=False):
    """Arguments for led"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFromledRecursive3(TypedDict, total=False):
    """Arguments for led"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFromledRecursive4(TypedDict, total=False):
    """Arguments for led"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    


FindManyledArgs = FindManyledArgsFromled
FindFirstledArgs = FindManyledArgsFromled


    

class ledWhereInput(TypedDict, total=False):
    """led arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    led1: Union[_str, 'types.StringFilter']
    led2: Union[_str, 'types.StringFilter']
    led3: Union[_str, 'types.StringFilter']
    led4: Union[_str, 'types.StringFilter']
    led5: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ledWhereInputRecursive1', List['ledWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ledWhereInputRecursive1']
    OR: List['ledWhereInputRecursive1']
    NOT: List['ledWhereInputRecursive1']


class ledWhereInputRecursive1(TypedDict, total=False):
    """led arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    led1: Union[_str, 'types.StringFilter']
    led2: Union[_str, 'types.StringFilter']
    led3: Union[_str, 'types.StringFilter']
    led4: Union[_str, 'types.StringFilter']
    led5: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ledWhereInputRecursive2', List['ledWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ledWhereInputRecursive2']
    OR: List['ledWhereInputRecursive2']
    NOT: List['ledWhereInputRecursive2']


class ledWhereInputRecursive2(TypedDict, total=False):
    """led arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    led1: Union[_str, 'types.StringFilter']
    led2: Union[_str, 'types.StringFilter']
    led3: Union[_str, 'types.StringFilter']
    led4: Union[_str, 'types.StringFilter']
    led5: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ledWhereInputRecursive3', List['ledWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ledWhereInputRecursive3']
    OR: List['ledWhereInputRecursive3']
    NOT: List['ledWhereInputRecursive3']


class ledWhereInputRecursive3(TypedDict, total=False):
    """led arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    led1: Union[_str, 'types.StringFilter']
    led2: Union[_str, 'types.StringFilter']
    led3: Union[_str, 'types.StringFilter']
    led4: Union[_str, 'types.StringFilter']
    led5: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ledWhereInputRecursive4', List['ledWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ledWhereInputRecursive4']
    OR: List['ledWhereInputRecursive4']
    NOT: List['ledWhereInputRecursive4']


class ledWhereInputRecursive4(TypedDict, total=False):
    """led arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    led1: Union[_str, 'types.StringFilter']
    led2: Union[_str, 'types.StringFilter']
    led3: Union[_str, 'types.StringFilter']
    led4: Union[_str, 'types.StringFilter']
    led5: Union[_str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate led types


    

class ledScalarWhereWithAggregatesInput(TypedDict, total=False):
    """led arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    led1: Union[_str, 'types.StringWithAggregatesFilter']
    led2: Union[_str, 'types.StringWithAggregatesFilter']
    led3: Union[_str, 'types.StringWithAggregatesFilter']
    led4: Union[_str, 'types.StringWithAggregatesFilter']
    led5: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ledScalarWhereWithAggregatesInputRecursive1']
    OR: List['ledScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ledScalarWhereWithAggregatesInputRecursive1']


class ledScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """led arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    led1: Union[_str, 'types.StringWithAggregatesFilter']
    led2: Union[_str, 'types.StringWithAggregatesFilter']
    led3: Union[_str, 'types.StringWithAggregatesFilter']
    led4: Union[_str, 'types.StringWithAggregatesFilter']
    led5: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ledScalarWhereWithAggregatesInputRecursive2']
    OR: List['ledScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ledScalarWhereWithAggregatesInputRecursive2']


class ledScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """led arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    led1: Union[_str, 'types.StringWithAggregatesFilter']
    led2: Union[_str, 'types.StringWithAggregatesFilter']
    led3: Union[_str, 'types.StringWithAggregatesFilter']
    led4: Union[_str, 'types.StringWithAggregatesFilter']
    led5: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ledScalarWhereWithAggregatesInputRecursive3']
    OR: List['ledScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ledScalarWhereWithAggregatesInputRecursive3']


class ledScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """led arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    led1: Union[_str, 'types.StringWithAggregatesFilter']
    led2: Union[_str, 'types.StringWithAggregatesFilter']
    led3: Union[_str, 'types.StringWithAggregatesFilter']
    led4: Union[_str, 'types.StringWithAggregatesFilter']
    led5: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ledScalarWhereWithAggregatesInputRecursive4']
    OR: List['ledScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ledScalarWhereWithAggregatesInputRecursive4']


class ledScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """led arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    led1: Union[_str, 'types.StringWithAggregatesFilter']
    led2: Union[_str, 'types.StringWithAggregatesFilter']
    led3: Union[_str, 'types.StringWithAggregatesFilter']
    led4: Union[_str, 'types.StringWithAggregatesFilter']
    led5: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ledGroupByOutput(TypedDict, total=False):
    id: _int
    led1: _str
    led2: _str
    led3: _str
    led4: _str
    led5: _str
    timestamp: datetime.datetime
    update_at: datetime.datetime
    _sum: 'ledSumAggregateOutput'
    _avg: 'ledAvgAggregateOutput'
    _min: 'ledMinAggregateOutput'
    _max: 'ledMaxAggregateOutput'
    _count: 'ledCountAggregateOutput'


class ledAvgAggregateOutput(TypedDict, total=False):
    """led output for aggregating averages"""
    id: float


class ledSumAggregateOutput(TypedDict, total=False):
    """led output for aggregating sums"""
    id: _int


class ledScalarAggregateOutput(TypedDict, total=False):
    """led output including scalar fields"""
    id: _int
    led1: _str
    led2: _str
    led3: _str
    led4: _str
    led5: _str
    timestamp: datetime.datetime
    update_at: datetime.datetime


ledMinAggregateOutput = ledScalarAggregateOutput
ledMaxAggregateOutput = ledScalarAggregateOutput


class ledMaxAggregateInput(TypedDict, total=False):
    """led input for aggregating by max"""
    id: bool
    led1: bool
    led2: bool
    led3: bool
    led4: bool
    led5: bool
    timestamp: bool
    update_at: bool


class ledMinAggregateInput(TypedDict, total=False):
    """led input for aggregating by min"""
    id: bool
    led1: bool
    led2: bool
    led3: bool
    led4: bool
    led5: bool
    timestamp: bool
    update_at: bool


class ledNumberAggregateInput(TypedDict, total=False):
    """led input for aggregating numbers"""
    id: bool


ledAvgAggregateInput = ledNumberAggregateInput
ledSumAggregateInput = ledNumberAggregateInput


ledCountAggregateInput = TypedDict(
    'ledCountAggregateInput',
    {
        'id': bool,
        'led1': bool,
        'led2': bool,
        'led3': bool,
        'led4': bool,
        'led5': bool,
        'timestamp': bool,
        'update_at': bool,
        '_all': bool,
    },
    total=False,
)

ledCountAggregateOutput = TypedDict(
    'ledCountAggregateOutput',
    {
        'id': int,
        'led1': int,
        'led2': int,
        'led3': int,
        'led4': int,
        'led5': int,
        'timestamp': int,
        'update_at': int,
        '_all': int,
    },
    total=False,
)


ledKeys = Literal[
    'id',
    'led1',
    'led2',
    'led3',
    'led4',
    'led5',
    'timestamp',
    'update_at',
]
ledScalarFieldKeys = Literal[
    'id',
    'led1',
    'led2',
    'led3',
    'led4',
    'led5',
    'timestamp',
    'update_at',
]
ledScalarFieldKeysT = TypeVar('ledScalarFieldKeysT', bound=ledScalarFieldKeys)

ledRelationalFieldKeys = _NoneType

# user types

class userOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the user create method"""
    id: _int
    create_at: datetime.datetime
    update_at: datetime.datetime


class userCreateInput(userOptionalCreateInput):
    """Required arguments to the user create method"""
    device: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class userOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the user create method, without relations"""
    id: _int
    create_at: datetime.datetime
    update_at: datetime.datetime


class userCreateWithoutRelationsInput(userOptionalCreateWithoutRelationsInput):
    """Required arguments to the user create method, without relations"""
    device: _str

class userConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'userCreateWithoutRelationsInput'
    where: 'userWhereUniqueInput'

class userCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'userCreateWithoutRelationsInput'
    connect: 'userWhereUniqueInput'
    connect_or_create: 'userConnectOrCreateWithoutRelationsInput'


class userCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['userCreateWithoutRelationsInput', List['userCreateWithoutRelationsInput']]
    connect: Union['userWhereUniqueInput', List['userWhereUniqueInput']]
    connect_or_create: Union['userConnectOrCreateWithoutRelationsInput', List['userConnectOrCreateWithoutRelationsInput']]

_userWhereUnique_id_Input = TypedDict(
    '_userWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

userWhereUniqueInput = _userWhereUnique_id_Input


class userUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    device: _str
    create_at: datetime.datetime
    update_at: datetime.datetime


class userUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    device: _str
    create_at: datetime.datetime
    update_at: datetime.datetime


class userUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['userCreateWithoutRelationsInput']
    connect: List['userWhereUniqueInput']
    connect_or_create: List['userConnectOrCreateWithoutRelationsInput']
    set: List['userWhereUniqueInput']
    disconnect: List['userWhereUniqueInput']
    delete: List['userWhereUniqueInput']

    # TODO
    # update: List['userUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['userUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['userScalarWhereInput']
    # upsert: List['userUpserteWithWhereUniqueWithoutRelationsInput']


class userUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'userCreateWithoutRelationsInput'
    connect: 'userWhereUniqueInput'
    connect_or_create: 'userConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'userUpdateInput'
    # upsert: 'userUpsertWithoutRelationsInput'


class userUpsertInput(TypedDict):
    create: 'userCreateInput'
    update: 'userUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_user_id_OrderByInput = TypedDict(
    '_user_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_user_device_OrderByInput = TypedDict(
    '_user_device_OrderByInput',
    {
        'device': 'SortOrder',
    },
    total=True
)

_user_create_at_OrderByInput = TypedDict(
    '_user_create_at_OrderByInput',
    {
        'create_at': 'SortOrder',
    },
    total=True
)

_user_update_at_OrderByInput = TypedDict(
    '_user_update_at_OrderByInput',
    {
        'update_at': 'SortOrder',
    },
    total=True
)

_user_RelevanceInner = TypedDict(
    '_user_RelevanceInner',
    {
        'fields': 'List[userScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_user_RelevanceOrderByInput = TypedDict(
    '_user_RelevanceOrderByInput',
    {
        '_relevance': '_user_RelevanceInner',
    },
    total=True
)

userOrderByInput = Union[
    '_user_id_OrderByInput',
    '_user_device_OrderByInput',
    '_user_create_at_OrderByInput',
    '_user_update_at_OrderByInput',
    '_user_RelevanceOrderByInput',
]



# recursive user types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

userRelationFilter = TypedDict(
    'userRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class userListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class userInclude(TypedDict, total=False):
    """user relational arguments"""


    

class sensorIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""


class sensorIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""


class sensorIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""


class sensorIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""


class sensorIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class sensorArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'sensorIncludeFromsensorRecursive1'


class sensorArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'sensorIncludeFromsensorRecursive2'


class sensorArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'sensorIncludeFromsensorRecursive3'


class sensorArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'sensorIncludeFromsensorRecursive4'


class sensorArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManysensorArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['sensorOrderByInput', List['sensorOrderByInput']]
    where: 'sensorWhereInput'
    cursor: 'sensorWhereUniqueInput'
    distinct: List['sensorScalarFieldKeys']
    include: 'sensorIncludeFromsensorRecursive1'


class FindManysensorArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['sensorOrderByInput', List['sensorOrderByInput']]
    where: 'sensorWhereInput'
    cursor: 'sensorWhereUniqueInput'
    distinct: List['sensorScalarFieldKeys']
    include: 'sensorIncludeFromsensorRecursive2'


class FindManysensorArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['sensorOrderByInput', List['sensorOrderByInput']]
    where: 'sensorWhereInput'
    cursor: 'sensorWhereUniqueInput'
    distinct: List['sensorScalarFieldKeys']
    include: 'sensorIncludeFromsensorRecursive3'


class FindManysensorArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['sensorOrderByInput', List['sensorOrderByInput']]
    where: 'sensorWhereInput'
    cursor: 'sensorWhereUniqueInput'
    distinct: List['sensorScalarFieldKeys']
    include: 'sensorIncludeFromsensorRecursive4'


class FindManysensorArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['sensorOrderByInput', List['sensorOrderByInput']]
    where: 'sensorWhereInput'
    cursor: 'sensorWhereUniqueInput'
    distinct: List['sensorScalarFieldKeys']
    
    

class ledIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""


class ledIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""


class ledIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""


class ledIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""


class ledIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class ledArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'ledIncludeFromledRecursive1'


class ledArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'ledIncludeFromledRecursive2'


class ledArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'ledIncludeFromledRecursive3'


class ledArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'ledIncludeFromledRecursive4'


class ledArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManyledArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['ledOrderByInput', List['ledOrderByInput']]
    where: 'ledWhereInput'
    cursor: 'ledWhereUniqueInput'
    distinct: List['ledScalarFieldKeys']
    include: 'ledIncludeFromledRecursive1'


class FindManyledArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['ledOrderByInput', List['ledOrderByInput']]
    where: 'ledWhereInput'
    cursor: 'ledWhereUniqueInput'
    distinct: List['ledScalarFieldKeys']
    include: 'ledIncludeFromledRecursive2'


class FindManyledArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['ledOrderByInput', List['ledOrderByInput']]
    where: 'ledWhereInput'
    cursor: 'ledWhereUniqueInput'
    distinct: List['ledScalarFieldKeys']
    include: 'ledIncludeFromledRecursive3'


class FindManyledArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['ledOrderByInput', List['ledOrderByInput']]
    where: 'ledWhereInput'
    cursor: 'ledWhereUniqueInput'
    distinct: List['ledScalarFieldKeys']
    include: 'ledIncludeFromledRecursive4'


class FindManyledArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['ledOrderByInput', List['ledOrderByInput']]
    where: 'ledWhereInput'
    cursor: 'ledWhereUniqueInput'
    distinct: List['ledScalarFieldKeys']
    
    

class userIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""


class userIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""


class userIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""


class userIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""


class userIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class userArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManyuserArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    


FindManyuserArgs = FindManyuserArgsFromuser
FindFirstuserArgs = FindManyuserArgsFromuser


    

class userWhereInput(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    device: Union[_str, 'types.StringFilter']
    create_at: Union[datetime.datetime, 'types.DateTimeFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['userWhereInputRecursive1', List['userWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['userWhereInputRecursive1']
    OR: List['userWhereInputRecursive1']
    NOT: List['userWhereInputRecursive1']


class userWhereInputRecursive1(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    device: Union[_str, 'types.StringFilter']
    create_at: Union[datetime.datetime, 'types.DateTimeFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['userWhereInputRecursive2', List['userWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['userWhereInputRecursive2']
    OR: List['userWhereInputRecursive2']
    NOT: List['userWhereInputRecursive2']


class userWhereInputRecursive2(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    device: Union[_str, 'types.StringFilter']
    create_at: Union[datetime.datetime, 'types.DateTimeFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['userWhereInputRecursive3', List['userWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['userWhereInputRecursive3']
    OR: List['userWhereInputRecursive3']
    NOT: List['userWhereInputRecursive3']


class userWhereInputRecursive3(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    device: Union[_str, 'types.StringFilter']
    create_at: Union[datetime.datetime, 'types.DateTimeFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['userWhereInputRecursive4', List['userWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['userWhereInputRecursive4']
    OR: List['userWhereInputRecursive4']
    NOT: List['userWhereInputRecursive4']


class userWhereInputRecursive4(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    device: Union[_str, 'types.StringFilter']
    create_at: Union[datetime.datetime, 'types.DateTimeFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate user types


    

class userScalarWhereWithAggregatesInput(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    device: Union[_str, 'types.StringWithAggregatesFilter']
    create_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['userScalarWhereWithAggregatesInputRecursive1']
    OR: List['userScalarWhereWithAggregatesInputRecursive1']
    NOT: List['userScalarWhereWithAggregatesInputRecursive1']


class userScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    device: Union[_str, 'types.StringWithAggregatesFilter']
    create_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['userScalarWhereWithAggregatesInputRecursive2']
    OR: List['userScalarWhereWithAggregatesInputRecursive2']
    NOT: List['userScalarWhereWithAggregatesInputRecursive2']


class userScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    device: Union[_str, 'types.StringWithAggregatesFilter']
    create_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['userScalarWhereWithAggregatesInputRecursive3']
    OR: List['userScalarWhereWithAggregatesInputRecursive3']
    NOT: List['userScalarWhereWithAggregatesInputRecursive3']


class userScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    device: Union[_str, 'types.StringWithAggregatesFilter']
    create_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['userScalarWhereWithAggregatesInputRecursive4']
    OR: List['userScalarWhereWithAggregatesInputRecursive4']
    NOT: List['userScalarWhereWithAggregatesInputRecursive4']


class userScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    device: Union[_str, 'types.StringWithAggregatesFilter']
    create_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    update_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class userGroupByOutput(TypedDict, total=False):
    id: _int
    device: _str
    create_at: datetime.datetime
    update_at: datetime.datetime
    _sum: 'userSumAggregateOutput'
    _avg: 'userAvgAggregateOutput'
    _min: 'userMinAggregateOutput'
    _max: 'userMaxAggregateOutput'
    _count: 'userCountAggregateOutput'


class userAvgAggregateOutput(TypedDict, total=False):
    """user output for aggregating averages"""
    id: float


class userSumAggregateOutput(TypedDict, total=False):
    """user output for aggregating sums"""
    id: _int


class userScalarAggregateOutput(TypedDict, total=False):
    """user output including scalar fields"""
    id: _int
    device: _str
    create_at: datetime.datetime
    update_at: datetime.datetime


userMinAggregateOutput = userScalarAggregateOutput
userMaxAggregateOutput = userScalarAggregateOutput


class userMaxAggregateInput(TypedDict, total=False):
    """user input for aggregating by max"""
    id: bool
    device: bool
    create_at: bool
    update_at: bool


class userMinAggregateInput(TypedDict, total=False):
    """user input for aggregating by min"""
    id: bool
    device: bool
    create_at: bool
    update_at: bool


class userNumberAggregateInput(TypedDict, total=False):
    """user input for aggregating numbers"""
    id: bool


userAvgAggregateInput = userNumberAggregateInput
userSumAggregateInput = userNumberAggregateInput


userCountAggregateInput = TypedDict(
    'userCountAggregateInput',
    {
        'id': bool,
        'device': bool,
        'create_at': bool,
        'update_at': bool,
        '_all': bool,
    },
    total=False,
)

userCountAggregateOutput = TypedDict(
    'userCountAggregateOutput',
    {
        'id': int,
        'device': int,
        'create_at': int,
        'update_at': int,
        '_all': int,
    },
    total=False,
)


userKeys = Literal[
    'id',
    'device',
    'create_at',
    'update_at',
]
userScalarFieldKeys = Literal[
    'id',
    'device',
    'create_at',
    'update_at',
]
userScalarFieldKeysT = TypeVar('userScalarFieldKeysT', bound=userScalarFieldKeys)

userRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields